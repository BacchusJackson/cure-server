{"version":3,"sources":["webpack:///./src/app/app.component.html","webpack:///./src/app/components/entry-form/entry-form.component.html","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/signin/signin.component.html","webpack:///./src/app/components/unauthorized/unauthorized.component.html","webpack:///./src/app/components/user-edit-form/user-edit-form.component.html","webpack:///./src/app/components/user-management/user-management.component.html","webpack:///./src/app/components/user-profile/changePasswordDialog.html","webpack:///./src/app/components/user-profile/user-profile.component.html","webpack:///./src/app/components/user-registration/user-registration.component.html","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/admin.guard.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/authentication.guard.ts","webpack:///./src/app/components/entry-form/entry-form.component.css","webpack:///./src/app/components/entry-form/entry-form.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/signin/signin.component.css","webpack:///./src/app/components/signin/signin.component.ts","webpack:///./src/app/components/unauthorized/unauthorized.component.css","webpack:///./src/app/components/unauthorized/unauthorized.component.ts","webpack:///./src/app/components/user-edit-form/user-edit-form.component.css","webpack:///./src/app/components/user-edit-form/user-edit-form.component.ts","webpack:///./src/app/components/user-management/user-management.component.css","webpack:///./src/app/components/user-management/user-management.component.ts","webpack:///./src/app/components/user-profile/user-profile.component.css","webpack:///./src/app/components/user-profile/user-profile.component.ts","webpack:///./src/app/components/user-registration/user-registration.component.css","webpack:///./src/app/components/user-registration/user-registration.component.ts","webpack:///./src/app/services/admin-users.service.ts","webpack:///./src/app/services/data.service.ts","webpack:///./src/app/services/users.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["module.exports = \"<app-navbar></app-navbar>\\n<div class=\\\"row\\\" style=\\\"height:90px\\\"></div>\\n<router-outlet></router-outlet>\\n\"","module.exports = \"<mat-card>\\n    <mat-card-content>\\n        <div>\\n            <h1>New Entry</h1>\\n            <p></p>\\n        </div>\\n        <form>\\n            <mat-form-field>\\n                <mat-label>Select a Category</mat-label>\\n                <mat-select [(ngModel)]=\\\"selectedCategory\\\" name=\\\"category\\\">\\n                    <mat-option *ngFor=\\\"let category of categories\\\" [value]=\\\"category\\\" (click)=\\\"filterActivities()\\\">{{category}}\\n                    </mat-option>\\n                </mat-select>\\n            </mat-form-field>\\n            <br>\\n            <mat-form-field>\\n                <mat-label>Select a Activity</mat-label>\\n                <mat-select [(ngModel)]=\\\"selectedActivity\\\" name=\\\"activity\\\">\\n                    <mat-option *ngFor=\\\"let activity of filteredActivities\\\" [value]=\\\"activity.name\\\"\\n                        (click)=\\\"renderProperties()\\\">{{activity.name}}\\n                    </mat-option>\\n                </mat-select>\\n            </mat-form-field>\\n            <br>\\n            <mat-form-field>\\n                <mat-label>Date</mat-label>\\n                <input matInput placeholder=\\\"Date of Activity\\\" [formControl]=\\\"entryDate\\\" [matDatepicker] = \\\"picker\\\">\\n                <mat-datepicker-toggle mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #picker></mat-datepicker>\\n                <mat-error *ngIf=\\\"entryDate.invalid\\\">{{ getErrorMessage(\\\"entryDate\\\") }}</mat-error>\\n            </mat-form-field>\\n            <mat-form-field *ngIf=\\\"showMembers\\\">\\n                <mat-label>Members</mat-label>\\n                <input matInput placeholder=\\\"Number of Members\\\" [formControl]=\\\"members\\\">\\n                <mat-error *ngIf=\\\"members.invalid\\\">{{ getErrorMessage(\\\"members\\\") }}</mat-error>\\n            </mat-form-field>\\n            <br>\\n            <mat-form-field *ngIf=\\\"showHours\\\">\\n                <mat-label>Hours</mat-label>\\n                <input matInput placeholder=\\\"Number of Hours\\\" [formControl]=\\\"hours\\\">\\n                <mat-error *ngIf=\\\"hours.invalid\\\">{{ getErrorMessage(\\\"hours\\\") }}</mat-error>\\n            </mat-form-field>\\n            <br>\\n            <mat-form-field *ngIf=\\\"showDescription\\\">\\n                <textarea matInput style=\\\"width:100%\\\" placeholder=\\\"Description\\\" [formControl]=\\\"description\\\"></textarea>\\n            </mat-form-field>\\n\\n        </form>\\n    </mat-card-content>\\n    <mat-card-actions>\\n\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onSubmit()\\\">Submit</button>\\n        <br>\\n        <button mat-button style=\\\"width: 90%\\\" (click)=\\\"onClear()\\\">Clear</button>\\n    </mat-card-actions>\\n</mat-card>\"","module.exports = \"<mat-toolbar color=\\\"primary\\\" class=\\\"CURE-toolbar\\\">\\n\\n  <span>CURE</span>\\n  <button *ngIf=\\\"user\\\" [routerLink]=\\\"['/entry']\\\" routerLinkActive=\\\"active\\\" mat-button>New Entry</button>\\n\\n  <span class=\\\"CURE-toolbar-divider\\\"></span>\\n  <!-- Middle Divider -->\\n  <span *ngIf=\\\"user\\\" style=\\\"margin-right: 2%\\\">{{user.displayName}}</span>\\n  \\n  <button mat-icon-button [matMenuTriggerFor]=\\\"appMenu\\\" style=\\\"width:3%\\\">\\n    <mat-icon>account_box</mat-icon>\\n    <mat-icon>expand_more</mat-icon>\\n\\n    <mat-menu #appMenu=\\\"matMenu\\\" yPosition=\\\"below\\\">\\n      <button *ngIf=\\\"!user\\\" mat-menu-item [routerLink]=\\\"['/']\\\" routerLinkActive=\\\"active\\\" >Login</button>\\n      <button *ngIf=\\\"user\\\" mat-menu-item [routerLink]=\\\"['/userProfile']\\\" routerLinkActive=\\\"active\\\" >My Profile</button>\\n      <button *ngIf=\\\"user\\\" mat-menu-item [routerLink]=\\\"['/manageUsers']\\\" routerLinkActive=\\\"active\\\" >Manage Users</button>\\n      <button *ngIf=\\\"user\\\" mat-menu-item [routerLink]=\\\"['/newUser']\\\" routerLinkActive=\\\"active\\\" >Create New User</button>\\n      <button *ngIf=\\\"user\\\" mat-menu-item [routerLink]=\\\"['/editUser']\\\" routerLinkActive=\\\"active\\\" >Edit User</button>\\n      <button *ngIf=\\\"user\\\" (click)='onLogoutClick()' mat-menu-item >Logout</button>\\n    </mat-menu>\\n  </button>\\n\\n</mat-toolbar>\"","module.exports = \"<mat-card>\\n    <mat-card-content>\\n        <div>\\n            <h1>Welcome to CURE</h1>\\n            <p>Sign In with your CURE account</p>\\n        </div>\\n        <form>\\n            <mat-form-field>\\n                <input matInput placeholder=\\\"Username\\\" [formControl]=\\\"username\\\" required>\\n                <mat-error *ngIf=\\\"username.invalid\\\">{{getErrorMessage(\\\"username\\\")}}</mat-error>\\n            </mat-form-field>\\n            <br>\\n            <mat-form-field>\\n                <input matInput placeholder=\\\"password\\\" type=\\\"password\\\" [formControl]=\\\"password\\\" required>\\n                <mat-error *ngIf=\\\"password.invalid\\\">{{getErrorMessage(\\\"password\\\")}}</mat-error>\\n            </mat-form-field>\\n        </form>\\n\\n    </mat-card-content>\\n    <mat-card-actions>\\n\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onSubmit()\\\" style=\\\"margin-bottom: 5%\\\">Login</button>\\n    </mat-card-actions>\\n</mat-card>\"","module.exports = \"<h1 style=\\\"text-align: center\\\">You don't have access to this function... :(</h1>\"","module.exports = \"<mat-card>\\n  <mat-card-content>\\n    <div>\\n      <h1>Edit User</h1>\\n    </div>\\n    <form>\\n      <mat-form-field>\\n        <mat-label>User ID</mat-label>\\n        <input matInput placeholder=\\\"User ID\\\" [formControl]=\\\"userID\\\" required>\\n        <mat-error *ngIf=\\\"userID.invalid\\\">{{getErrorMessage(\\\"userID\\\")}}</mat-error>\\n      </mat-form-field>\\n      <br>\\n      <mat-form-field *ngIf=\\\"userLoaded\\\">\\n        <mat-label>first Name</mat-label>\\n        <input matInput placeholder=\\\"First Name\\\" [formControl]=\\\"firstName\\\" required>\\n        <mat-error *ngIf=\\\"firstName.invalid\\\">{{getErrorMessage(\\\"firstName\\\")}}</mat-error>\\n      </mat-form-field>\\n      <br>\\n      <mat-form-field *ngIf=\\\"userLoaded\\\">\\n        <mat-label>Last Name</mat-label>\\n        <input matInput placeholder=\\\"Last Name\\\" [formControl]=\\\"lastName\\\" required>\\n        <mat-error *ngIf=\\\"lastName.invalid\\\">{{getErrorMessage(\\\"lastName\\\")}}</mat-error>\\n      </mat-form-field>\\n      <br>\\n      <mat-form-field *ngIf=\\\"userLoaded\\\">\\n        <mat-label>username</mat-label>\\n        <input matInput placeholder=\\\"Username\\\" [formControl]=\\\"username\\\" required>\\n        <mat-error *ngIf=\\\"username.invalid\\\">{{getErrorMessage(\\\"username\\\")}}</mat-error>\\n      </mat-form-field>\\n      <br>\\n      <mat-form-field *ngIf=\\\"userLoaded\\\">\\n        <mat-label>Site</mat-label>\\n        <mat-select [(ngModel)]=\\\"selectedSite\\\" name=\\\"site\\\">\\n          <mat-option *ngFor=\\\"let site of sites\\\" [value]=\\\"site.name\\\">{{site.name}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n      <br>\\n      <mat-form-field *ngIf=\\\"userLoaded\\\">\\n        <mat-label>Clinic</mat-label>\\n        <mat-select [(ngModel)]=\\\"selectedClinic\\\" name=\\\"clinic\\\">\\n          <mat-option *ngFor=\\\"let clinic of clinics\\\" [value]=\\\"clinic\\\">{{clinic}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n      <mat-form-field *ngIf=\\\"userLoaded\\\">\\n        <mat-label>User Status</mat-label>\\n        <mat-select [(ngModel)]=\\\"selectedStatus\\\" name=\\\"status\\\">\\n          <mat-option *ngFor=\\\"let status of statuses\\\" [value]=\\\"status\\\">{{status}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n    </form>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onSubmit()\\\" style=\\\"margin-bottom: 5%\\\">Save</button>\\n    <button mat-raised-button color=\\\"warn\\\" (click)=\\\"onDelete()\\\" style=\\\"margin-bottom: 5%\\\">Delete User</button>\\n  </mat-card-actions>\\n\\n</mat-card>\"","module.exports = \"<div style=\\\"width:85%; margin-left:auto; margin-right: auto\\\">\\n  <mat-form-field style=\\\"width:50%\\\">\\n    <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n  </mat-form-field>\\n  <br>\\n  <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\" style=\\\"width: 100%\\\">\\n\\n    <ng-container matColumnDef=\\\"id\\\">\\n      <th mat-header-cell *matHeaderCellDef>ID</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element._id}}</td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"firstName\\\">\\n      <th mat-header-cell *matHeaderCellDef>First Name</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.firstName}}</td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"lastName\\\">\\n      <th mat-header-cell *matHeaderCellDef>Last Name</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.lastName}}</td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"username\\\">\\n      <th mat-header-cell *matHeaderCellDef>Username</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.username}}</td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"displayName\\\">\\n      <th mat-header-cell *matHeaderCellDef>Display Name</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.displayName}}</td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"site\\\">\\n      <th mat-header-cell *matHeaderCellDef>Site</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.site}}</td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"clinic\\\">\\n      <th mat-header-cell *matHeaderCellDef>Clinic</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.clinic}}</td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"status\\\">\\n      <th mat-header-cell *matHeaderCellDef>Status</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.status}}</td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayColumns; sticky: true\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayColumns\\\"></tr>\\n  </table>\\n</div>\"","module.exports = \"\\n<form>\\n    <h1>Change Password</h1>\\n    <p>Password must contain at least 1 of the following:</p>\\n    <ul>\\n        <li>Lower Case Letter</li>\\n        <li>Upper Case Letter</li>\\n        <li>Number</li>\\n        <li>Special Character</li>\\n    </ul>\\n    <mat-form-field>\\n        <input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" [formControl]=\\\"password\\\" required>\\n        <mat-error *ngIf=\\\"password.invalid\\\">{{getErrorMessage(\\\"password\\\")}}</mat-error>\\n    </mat-form-field>\\n    <mat-form-field>\\n        <input matInput placeholder=\\\"Confirm Password\\\" type=\\\"password\\\" [formControl]=\\\"passwordConfirm\\\" required>\\n        <mat-error *ngIf=\\\"passwordConfirm.invalid\\\">{{getErrorMessage(\\\"passwordConfirm\\\")}}</mat-error>\\n    </mat-form-field>\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onSubmit()\\\" style=\\\"margin-bottom: 5%\\\">Save</button>\\n</form>\"","module.exports = \"<mat-card>\\n    <mat-card-content>\\n      <div>\\n        <h1>Edit My Information</h1>\\n      </div>\\n      <form>\\n        <mat-form-field>\\n          <mat-label>first Name</mat-label>\\n          <input matInput placeholder=\\\"First Name\\\" [formControl]=\\\"firstName\\\" required>\\n          <mat-error *ngIf=\\\"firstName.invalid\\\">{{getErrorMessage(\\\"firstName\\\")}}</mat-error>\\n        </mat-form-field>\\n        <br>\\n        <mat-form-field>\\n          <mat-label>Last Name</mat-label>\\n          <input matInput placeholder=\\\"Last Name\\\" [formControl]=\\\"lastName\\\" required>\\n          <mat-error *ngIf=\\\"lastName.invalid\\\">{{getErrorMessage(\\\"lastName\\\")}}</mat-error>\\n        </mat-form-field>\\n        <br>\\n        <mat-form-field>\\n          <mat-label>Display Name</mat-label>\\n          <input matInput placeholder=\\\"Display Name\\\" [formControl]=\\\"displayName\\\" required>\\n          <mat-error *ngIf=\\\"displayName.invalid\\\">{{getErrorMessage(\\\"displayName\\\")}}</mat-error>\\n        </mat-form-field>\\n      </form>\\n    </mat-card-content> \\n    <mat-card-actions>\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onSubmit()\\\" style=\\\"margin-bottom: 2%\\\">Save</button>\\n      <button mat-button color=\\\"accent\\\" (click)=\\\"onResetPassword()\\\">Click here to change password</button>\\n    </mat-card-actions>\\n  </mat-card>\"","module.exports = \"<mat-card>\\n  <mat-card-content>\\n    <div>\\n      <h1>Register a New User</h1>\\n      <p></p>\\n    </div>\\n    <form>\\n      <mat-form-field>\\n        <mat-label>First Name</mat-label>\\n        <input matInput placeholder=\\\"First Name\\\" [formControl]=\\\"firstName\\\">\\n        <mat-error *ngIf=\\\"firstName.invalid\\\">{{ getErrorMessage(\\\"firstName\\\") }}</mat-error>\\n      </mat-form-field>\\n      <br>\\n      <mat-form-field>\\n        <mat-label>Last Name</mat-label>\\n        <input matInput placeholder=\\\"Last Name\\\" [formControl]=\\\"lastName\\\">\\n        <mat-error *ngIf=\\\"lastName.invalid\\\">{{ getErrorMessage(\\\"lastName\\\") }}</mat-error>\\n      </mat-form-field>\\n      <br>\\n      <mat-form-field>\\n        <mat-label>Username</mat-label>\\n        <input matInput placeholder=\\\"Username\\\" [formControl]=\\\"username\\\">\\n        <mat-error *ngIf=\\\"username.invalid\\\">{{ getErrorMessage(\\\"username\\\") }}</mat-error>\\n      </mat-form-field>\\n      <br>\\n    </form>\\n  </mat-card-content>\\n  <mat-card-actions>\\n\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onSubmit()\\\">Submit</button>\\n    <br>\\n    <button mat-button style=\\\"width: 90%\\\" (click)=\\\"onClear()\\\">Clear</button>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<!-- User Creatation Card -->\\n\\n<mat-card *ngIf=\\\"createdUsername\\\">\\n  <mat-card-content>\\n    <h1>Temporary User Information</h1>\\n    <p>Please Instruct the User to change their password Immediately!!</p>\\n    <br>\\n    <h2>Username: {{createdUsername}}</h2>\\n    <h2>Password: {{tempPassword}}</h2>\\n  </mat-card-content>\\n</mat-card>\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { UsersService } from './services/users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements  CanActivate{\n  constructor(private router: Router, private usersService: UsersService){}\n\n  canActivate() {\n    // If the token is good and the logged in user is admin, return true\n    if(this.usersService.goodToken) {\n      if(this.usersService.mainUser.status == 'admin') {\n        return true;\n      }\n    }\n    this.router.navigate(['/unauthorized']);\n    return false;\n  }\n}\n\n/*\nTODO:\n- Check the user for admin privilages\n- Create Admin account for testing\n*/\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SigninComponent } from './components/signin/signin.component';\nimport { EntryFormComponent } from './components/entry-form/entry-form.component';\nimport { UserRegistrationComponent } from \"./components/user-registration/user-registration.component\";\nimport { UserManagementComponent } from \"./components/user-management/user-management.component\";\nimport { UserEditFormComponent } from \"./components/user-edit-form/user-edit-form.component\";\nimport { UserProfileComponent } from './components/user-profile/user-profile.component';\nimport { UnauthorizedComponent } from './components/unauthorized/unauthorized.component';\n\nimport { AuthenticationGuard} from \"./authentication.guard\";\nimport { AdminGuard } from \"./admin.guard\";\nconst routes: Routes = [\n  {path:'', component: SigninComponent},\n  {path:'entry', component: EntryFormComponent, canActivate: [AuthenticationGuard]},\n  {path: 'newUser', component: UserRegistrationComponent, canActivate: [AdminGuard]},\n  {path: 'manageUsers', component: UserManagementComponent, canActivate: [AdminGuard]},\n  {path: 'editUser', component: UserEditFormComponent, canActivate: [AdminGuard]},\n  {path: 'userProfile', component: UserProfileComponent, canActivate: [AuthenticationGuard]},\n  {path: 'unauthorized', component: UnauthorizedComponent},\n  {path: '**', redirectTo: 'entry'}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }","module.exports = \".mat-card {\\n  justify-content: start;\\n  width: 40%;\\n  margin: auto;\\n  text-align: center;\\n}\\n\\n.mat-form-field {\\n  width: 90%;\\n}\\n\\n.borderON {\\n  border-style: solid;\\n  border-width: 5px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxzQkFBc0I7RUFDdEIsVUFBVTtFQUNWLFlBQVk7RUFDWixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsaUJBQWlCO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWF0LWNhcmQge1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICB3aWR0aDogNDAlO1xuICBtYXJnaW46IGF1dG87XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLm1hdC1mb3JtLWZpZWxkIHtcbiAgd2lkdGg6IDkwJTtcbn1cblxuLmJvcmRlck9OIHtcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgYm9yZGVyLXdpZHRoOiA1cHg7XG59Il19 */\"","import { Component } from '@angular/core';\nimport { UsersService } from './services/users.service';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor(\n    private usersService: UsersService, \n    private router: Router,\n    private snackBar: MatSnackBar\n    ) {}\n\n  ngOnInit() {\n\n    if(this.usersService.goodToken) {\n      this.usersService.getUser(localStorage.getItem('token'));\n      this.router.navigate(['entry']);\n    } else {\n      this.router.navigate([''])\n    }\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { AppRoutingModule } from './app-routing.module';\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { HttpClientModule } from \"@angular/common/http\";\n\n//Material Design Stuff\nimport {MatTabsModule} from '@angular/material/tabs';\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatMenuModule } from \"@angular/material/menu\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\nimport { MatNativeDateModule } from \"@angular/material\";\nimport { MatTableModule } from \"@angular/material\";\nimport { MatRadioModule } from \"@angular/material/radio\";\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatDialogModule} from '@angular/material/dialog'\n\n//Components\nimport { SigninComponent } from './components/signin/signin.component';\nimport { AppComponent } from \"./app.component\";\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { EntryFormComponent } from './components/entry-form/entry-form.component';\nimport { UserRegistrationComponent } from './components/user-registration/user-registration.component';\nimport { UserManagementComponent } from './components/user-management/user-management.component';\nimport { UserEditFormComponent } from './components/user-edit-form/user-edit-form.component';\nimport { UserProfileComponent, ChangePasswordDialog } from './components/user-profile/user-profile.component';\nimport { UnauthorizedComponent } from './components/unauthorized/unauthorized.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SigninComponent,\n    NavbarComponent,\n    EntryFormComponent,\n    UserRegistrationComponent,\n    UserManagementComponent,\n    UserEditFormComponent,\n    UserProfileComponent,\n    ChangePasswordDialog,\n    UnauthorizedComponent\n  ],\n  entryComponents: [\n    ChangePasswordDialog\n  ],\n  imports: [\n    BrowserModule, FormsModule, AppRoutingModule, HttpClientModule,\n    BrowserAnimationsModule, ReactiveFormsModule,\n    MatTabsModule, MatToolbarModule, MatMenuModule, MatIconModule,\n    MatButtonModule, MatCardModule, MatFormFieldModule, MatInputModule,\n    MatSelectModule, MatSnackBarModule, MatDatepickerModule, MatNativeDateModule,\n    MatTableModule, MatRadioModule, MatProgressSpinnerModule, MatDialogModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\nplatformBrowserDynamic().bootstrapModule(AppModule);","import { Injectable } from '@angular/core';\nimport { UsersService } from './services/users.service';\nimport { Router, CanActivate } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationGuard implements CanActivate {\n\n  constructor(private usersService: UsersService, private router:Router){}\n\n  canActivate() {\n\n    // Check for a good token and load the user into the global space\n    if(this.usersService.goodToken) {\n      this.usersService.getUser(localStorage.getItem('token'));\n      return true;\n    } else {\n      this.router.navigate(['/']);\n      return false;\n    }\n  }\n  \n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZW50cnktZm9ybS9lbnRyeS1mb3JtLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { MatSnackBar } from \"@angular/material\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { DataService, Activity, Entry } from \"../../services/data.service\";\nimport { UsersService } from 'src/app/services/users.service';\nimport { isDate } from 'util';\n\n@Component({\n  selector: 'app-entry-form',\n  templateUrl: './entry-form.component.html',\n  styleUrls: ['./entry-form.component.css']\n})\nexport class EntryFormComponent implements OnInit {\n  constructor(private snackBar:MatSnackBar, private dataService:DataService, private usersService: UsersService) { }\n  selectedCategory: string;\n  selectedActivity: string;\n  \n  // show or hide fields based on properties\n  showMembers: boolean = false;\n  showHours: boolean = false;\n  showDescription: boolean = false;\n\n  // form control bindings\n  members = new FormControl('', [Validators.required, Validators.pattern('[0-9]*')]);\n  description = new FormControl();\n  hours = new FormControl('', [Validators.required, Validators.pattern('[0-9]*')]);\n  entryDate = new FormControl('', [Validators.required])\n\n  categories: any;\n  activities: Activity[];\n  filteredActivities: Activity[];\n\n  async ngOnInit() {\n    // Get all of the activities from the Database\n    this.activities = await this.dataService.getActivities();\n    \n    // Filter through the activities to get the unique category names\n    this.categories = this.activities.map((item) => { return item.category })\n    // Remove Duplicates after maping (get only the category for each array item)\n    .filter((item, i, ar) => {return ar.indexOf(item) === i});\n  }\n  \n  resetFields() {\n    this.members.reset();\n    this.hours.reset();\n    this.description.reset();\n  }\n  // Filter the activities based on category\n  filterActivities() {\n    this.filteredActivities = this.activities.filter((item) => item.category == this.selectedCategory)\n\n    this.resetFields()\n  }\n  // show or hide the text boxes based on the properties list\n  renderProperties() {\n    // Filter based on the selected activity to get the properties\n    let properties: any = this.activities\n    .filter((item) => item.name == this.selectedActivity)\n    .map((item) => item.properties);\n    properties = properties[0];\n\n    // If the activity has one of the properties, display it\n    properties.includes('members') ? this.showMembers = true : this.showMembers = false;\n    properties.includes('hours') ? this.showHours = true : this.showHours = false;\n    properties.includes('description') ? this.showDescription = true : this.showDescription = false;\n\n    this.resetFields();\n\n  }\n  // show the red error messages under the text boxes\n  getErrorMessage(field: string) {\n    switch(field) {\n      case 'members':\n        return this.members.hasError('required') ? 'This field cannot be left blank' : \n        this.members.hasError('pattern') ? 'this field must be a number' : '';\n      case 'hours':\n        return this.hours.hasError('required') ? 'This field cannot be left blank' : \n        this.hours.hasError('pattern') ? 'this field must be a number' : '';\n      case 'entryDate':\n        return this.entryDate.hasError('required') ? 'This field cannot be left blank' : '';\n    }\n  }\n\n  // Check if fields are visible and then check if they are validated correctly\n  validateForm(): boolean {\n\n    if(this.showDescription) {\n      if(this.description.invalid) {\n        return false\n      }\n    }\n    if(this.showHours) {\n      if(this.hours.invalid) {\n        return false\n      }\n    }\n    if(this.showMembers) {\n      if(this.description.invalid) {\n        return false\n      }\n    }\n    if(this.entryDate.invalid || isDate(this.entryDate.value) == false) {\n      return false\n    }\n    return true\n  }\n\n  async onSubmit() {\n    // Validate the form and submit\n    if(!this.validateForm()) {\n\n      this.snackBar.open('you forgot something...', 'dismiss', {duration: 2000});\n\n      return false;\n    }\n\n    let selectedActivityObj = this.activities.filter((item) => item.name == this.selectedActivity)[0]\n    let entry: Entry = {\n      activityID: selectedActivityObj._id,\n      activity: selectedActivityObj.name,\n      category: selectedActivityObj.category,\n      creator: this.usersService.mainUser.username,\n      dateEntered: new Date(),\n      dateCreated: new Date(),\n      site: this.usersService.mainUser.site,\n      clinic: this.usersService.mainUser.clinic,\n      userStatus: this.usersService.mainUser.status,\n      hours: this.hours.value || null,\n      members: this.members.value || null,\n      description: this.description.value || null\n      }\n\n      const submitEntryRequest = await this.dataService.addEntry(entry);\n\n      if(submitEntryRequest) {\n        this.snackBar.open('Thank you!', 'dimiss', {duration: 2000});\n      } else {\n        this.snackBar.open('Something went wrong while attempting to submit entry..', 'dismiss', {duration: 3000})\n      }\n    }\n\n  onClear() {\n    this.resetFields();\n  }\n\n}\n","module.exports = \".CURE-toolbar-divider {\\n    flex: 1 1 auto;\\n}\\n.CURE-toolbar {\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    z-index: 998;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9uYXZiYXIvbmF2YmFyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsTUFBTTtJQUNOLE9BQU87SUFDUCxRQUFRO0lBQ1IsWUFBWTtBQUNoQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbmF2YmFyL25hdmJhci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLkNVUkUtdG9vbGJhci1kaXZpZGVyIHtcbiAgICBmbGV4OiAxIDEgYXV0bztcbn1cbi5DVVJFLXRvb2xiYXIge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICByaWdodDogMDtcbiAgICB6LWluZGV4OiA5OTg7XG59XG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from \"@angular/router\";\nimport { MatSnackBar } from \"@angular/material\";\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { UsersService, User } from 'src/app/services/users.service';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  user: User;\n\n  constructor(\n    private router:Router,\n    private snackBar:MatSnackBar,\n    private usersService:UsersService\n    ) { }\n\n  ngOnInit() {\n\n    // When ever a log in or out event is trigger, this will change the user\n    this.usersService.userLoggedIn.subscribe(\n      (userLoggedIn) => {\n        if(userLoggedIn) {\n          this.user = this.usersService.mainUser;\n        }else {\n          this.user = null;\n        }\n      },\n      (err) => {\n        if(err) throw err;\n      }\n    );\n  }\n  \n  onLogoutClick(){\n    this.usersService.logout();\n    this.snackBar.open('See you next time!','dismiss', {duration:4000});\n    this.router.navigate(['/'])\n  }\n\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvc2lnbmluL3NpZ25pbi5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { MatSnackBar } from \"@angular/material\";\nimport { UsersService } from \"../../services/users.service\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: \"app-signin\",\n  templateUrl: \"./signin.component.html\",\n  styleUrls: [\"./signin.component.css\"]\n})\nexport class SigninComponent implements OnInit {\n  username = new FormControl(\"\", [Validators.required]);\n  password = new FormControl(\"\", [Validators.required]);\n\n  constructor(\n    private snackBar: MatSnackBar,\n    private usersService: UsersService,\n    private router: Router,\n  ) {}\n\n  ngOnInit() {\n    if(this.usersService.goodToken) {\n      this.usersService.getUser(localStorage.getItem('token'));\n    }\n  }\n\n  getErrorMessage(field: String) {\n    if (field == \"username\") {\n      // if there is an error, return the message, if not return blank\n      return this.username.hasError(\"required\")\n        ? \"This field cannot be blank\"\n        : \"\";\n    } else if (field == \"password\") {\n      return this.password.hasError(\"required\")\n        ? \"This field cannot be blank\"\n        : \"\";\n    }\n  }\n\n  async onSubmit() {\n    if (this.username.valid && this.password.valid) {\n      const signInResponse = await this.usersService.signIn({\n        username: this.username.value,\n        password: this.password.value\n      });\n\n      if (signInResponse.errorMessage) {\n        this.snackBar.open(signInResponse.errorMessage, \"dismiss\", {\n          duration: 2000\n        });\n      } else {\n        // Load the user into the global space (userservice mainUser)\n        this.usersService.getUser(signInResponse.accessToken);\n\n        this.snackBar.open(\"Welcome Back!\", \"dismiss\", { duration: 2000 });\n        this.router.navigate([\"/entry\"]);\n      }\n    } else {\n      this.snackBar.open(\"You missed something...\", \"dismiss\", {\n        duration: 2000\n      });\n    }\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdW5hdXRob3JpemVkL3VuYXV0aG9yaXplZC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-unauthorized',\n  templateUrl: './unauthorized.component.html',\n  styleUrls: ['./unauthorized.component.css']\n})\nexport class UnauthorizedComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".radio-group {\\n  display: flex;\\n  margin-top: 5%;\\n}\\n\\n.radio-button {\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy91c2VyLWVkaXQtZm9ybS91c2VyLWVkaXQtZm9ybS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy91c2VyLWVkaXQtZm9ybS91c2VyLWVkaXQtZm9ybS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnJhZGlvLWdyb3VwIHtcbiAgZGlzcGxheTogZmxleDtcbiAgbWFyZ2luLXRvcDogNSU7XG59XG5cbi5yYWRpby1idXR0b24ge1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xufSJdfQ== */\"","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { AdminUsersService } from \"src/app/services/admin-users.service\";\nimport { MatSnackBar } from \"@angular/material\";\nimport { isUndefined } from 'util';\nimport { Router } from '@angular/router';\nimport { DataService } from 'src/app/services/data.service';\n\n@Component({\n  selector: \"app-user-edit-form\",\n  templateUrl: \"./user-edit-form.component.html\",\n  styleUrls: [\"./user-edit-form.component.css\"]\n})\nexport class UserEditFormComponent implements OnInit {\n  \n  constructor(\n    private router: Router,\n    private adminUsersService: AdminUsersService,\n    private snackBar: MatSnackBar,\n    private dataService: DataService\n  ) {}\n\n  userID = new FormControl(\"\", [Validators.required]);\n  firstName = new FormControl(\"\", [Validators.required]);\n  lastName = new FormControl(\"\", [Validators.required]);\n  username = new FormControl(\"\", [Validators.required]);\n  site = new FormControl(\"\", [Validators.required]);\n\n  sites = this.dataService.getSites();\n  clinics = ['Mental Health', 'Physical Medicine'];\n  statuses = ['standard', 'admin'];\n\n  selectedClinic: string;\n  selectedSite: string;\n  selectedStatus: string;\n\n  // Used to set the input fields as visible or not\n  userLoaded: Boolean = false;\n  attemptedValue = '';\n\n  ngOnInit() {\n    // Watch the userID field, if it hits length 24 then load a user\n    this.userID.valueChanges.subscribe(value => {\n      if (value.length == 24 && this.attemptedValue != value) {\n        this.attemptedValue = value;\n        this.userID.disable();\n        this.loadUser(value);\n\n      }\n    });\n  }\n\n  async loadUser(userID) {\n    const user = await this.adminUsersService.getUser(userID);\n    if (!user) {\n      this.userLoaded = false;\n      this.snackBar.open(\"User not found... Check ID\", \"dismiss\", {\n        duration: 3000 });\n        this.userID.enable();\n    } else {\n      this.firstName.setValue(user.firstName);\n      this.lastName.setValue(user.lastName);\n      this.username.setValue(user.username);\n      this.selectedClinic = user.clinic || '';\n      this.selectedSite = user.site || '';\n      this.selectedStatus = user.status || '';\n      // Show the other fields on the form\n      this.userLoaded = true;\n    }\n  }\n\n  getErrorMessage(field: string): string {\n    const blankMessage = \"this field cannot be left blank\";\n    switch (field) {\n      case \"userID\":\n        return this.userID.hasError(\"required\") ? blankMessage : \"\";\n      case \"firstName\":\n        return this.firstName.hasError(\"required\") ? blankMessage : \"\";\n      case \"lastName\":\n        return this.lastName.hasError(\"required\") ? blankMessage : \"\";\n      case \"username\":\n        return this.username.hasError(\"required\") ? blankMessage : \"\";\n    }\n  }\n\n  // TODO: fix site and clinic generation after loading id\n  async onSubmit() {\n    if(this.userID.invalid || this.firstName.invalid || this.lastName.invalid || this.username.invalid) {\n      this.snackBar.open('You forgot something...', 'dismiss', {duration: 3000});\n      return false;\n    };\n\n    const userEditInfo = {\n      id: this.userID.value,\n      firstName: this.firstName.value,\n      lastName: this.lastName.value,\n      username: this.username.value,\n      site: this.selectedSite,\n      clinic: this.selectedClinic,\n      status: this.selectedStatus\n    };\n    let updateRequest = await this.adminUsersService.updateUserInfo(userEditInfo);\n\n    if(isUndefined(updateRequest.username)) {\n      this.snackBar.open('Something went wrong...', 'dismiss', {duration: 3000});\n    }else {\n      this.snackBar.open('Successful Update!', 'dismiss', {duration: 2000});\n      this.router.navigate(['/manageUsers']);\n    }\n  }\n\n  async onDelete() {\n\n    // Pop up menu to confirm deletion\n    let confirmation = confirm(\"Are you sure you want to delete this user?\");\n    if(!confirmation) {return false };\n    const deleteRequest = await this.adminUsersService.deleteUser(this.userID.value);\n    this.snackBar.open('User Successfully Deleted', 'dismiss', {duration: 3000});\n    this.router.navigate(['manageUsers']);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXNlci1tYW5hZ2VtZW50L3VzZXItbWFuYWdlbWVudC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport {MatTableDataSource} from '@angular/material';\nimport { AdminUsersService } from 'src/app/services/admin-users.service';\n\n@Component({\n  selector: 'app-user-management',\n  templateUrl: './user-management.component.html',\n  styleUrls: ['./user-management.component.css']\n})\n\nexport class UserManagementComponent implements OnInit {\n  \n  displayColumns: string[] = ['id', 'firstName', 'lastName', 'username', 'displayName', 'site', 'clinic', 'status'];\n  dataSource: any;\n  constructor(private adminUsersService: AdminUsersService) { }\n  \n  ngOnInit() {\n    \n    this.adminUsersService.getAllUsers()\n    .then( (results) => {\n\n        this.dataSource = new MatTableDataSource(results);\n      }\n    )\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n}\n\n\nexport interface users {\n  _id: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n  displayName: string;\n  site: string;\n  clinic: string;\n  status: string;\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXNlci1wcm9maWxlL3VzZXItcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { UsersService } from 'src/app/services/users.service';\nimport { MatSnackBar } from '@angular/material';\nimport { isUndefined } from 'util';\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n})\nexport class UserProfileComponent implements OnInit {\n  // Create new form controls\n  firstName = new FormControl('', [Validators.required]);\n  lastName = new FormControl('', [Validators.required]);\n  displayName = new FormControl('', [Validators.required]);\n\n  constructor(private usersService:UsersService, private snackBar:MatSnackBar, private dialog:MatDialog) { }\n\n  ngOnInit() {\n    // Pull the existing values from logged in user\n    this.firstName.setValue(this.usersService.mainUser.firstName);\n    this.lastName.setValue(this.usersService.mainUser.lastName);\n    this.displayName.setValue(this.usersService.mainUser.displayName);\n  }\n  getErrorMessage(field:string):string {\n    const blankMessage = 'this field cannot be left blank';\n    switch(field) {\n      case 'firstName':\n        return this.firstName.hasError('required') ? blankMessage : '';\n      case 'lastName':\n        return this.lastName.hasError('required') ? blankMessage : '';\n      case 'displayName':\n        return this.displayName.hasError('required') ? blankMessage : '';\n      };\n    };\n\n  async onSubmit() {\n    if(this.firstName.valid && this.lastName.valid && this.displayName.valid) {\n      let updateRequest = await this.usersService.updateUserInfo({\n        firstName: this.firstName.value, \n        lastName: this.lastName.value, \n        displayName: this.displayName.value\n      });\n      // The return should be the updated user. If there's no username, something went wrong\n      if(isUndefined(updateRequest.username)) {\n        this.snackBar.open('Something went wrong...', 'dismiss', {duration: 3000});\n      }else {\n        this.usersService.getUser(this.usersService.mainUser.token);\n        this.snackBar.open('Successful update!', 'dismiss', {duration: 3000})\n      };\n\n    }\n  }\n\n  onResetPassword() {\n    this.dialog.open(ChangePasswordDialog);\n  }\n}\n\n@Component({\n  selector: 'changePasswordDialog',\n  templateUrl: 'changePasswordDialog.html',\n})\nexport class ChangePasswordDialog {\n\n  constructor(\n    public dialogRef: MatDialogRef<ChangePasswordDialog>,\n    private usersService: UsersService,\n    private snackBar: MatSnackBar\n    \n    ) {}\n  password = new FormControl('', [Validators.pattern('^(?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])([^\\\\s]){6,25}$')]);\n  passwordConfirm = new FormControl('', [Validators.pattern('^(?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])([^\\\\s]){6,25}$')]);\n\n  async onSubmit() {\n    if(this.password.value !== this.passwordConfirm.value) {\n      this.snackBar.open('Your passwords do not match!', 'dismiss', {duration: 3000})\n      return false};\n    if(this.password.hasError('pattern') || this.passwordConfirm.hasError('pattern')) {\n      this.snackBar.open('Your password is missing a required character or is not long enough!', 'dismiss', {duration: 3000})\n      return false\n    };\n\n    // Change the data in the database and capture respose\n    let updateRequest = await this.usersService.updateUserInfo(null, {password: this.password.value });\n    // The return should be the updated user. If there's no username, something went wrong\n    if(isUndefined(updateRequest.username)) {\n      this.snackBar.open('Something went wrong...', 'dismiss', {duration: 3000});\n    }else {\n      this.usersService.getUser(this.usersService.mainUser.token);\n      this.snackBar.open('Successful update!', 'dismiss', {duration: 3000})\n    };\n\n    this.snackBar.open('Your password has been changed!', 'dismiss', {duration: 3000});\n    this.dialogRef.close();\n  }\n  getErrorMessage(field: string) {\n    switch(field) {\n      case \"password\":\n        return this.password.hasError('pattern') ? 'Password is missing something' : '';\n      case \"passwordConfirm\":\n        return this.passwordConfirm.hasError('pattern') ? 'This password is missing something' : '';\n    }\n  }\n  onNoClick() {\n    this.dialogRef.close();\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXNlci1yZWdpc3RyYXRpb24vdXNlci1yZWdpc3RyYXRpb24uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { MatSnackBar } from \"@angular/material\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport * as randomWords from \"random-words\";\nimport { AdminUsersService } from 'src/app/services/admin-users.service';\n\n@Component({\n  selector: 'app-user-registration',\n  templateUrl: './user-registration.component.html',\n  styleUrls: ['./user-registration.component.css']\n})\nexport class UserRegistrationComponent implements OnInit {\n  //TODO: Add Clinic and Site Dropdowns\n  firstName = new FormControl('', [Validators.required]);\n  lastName = new FormControl('', [Validators.required]);\n  username = new FormControl('', [Validators.required]);\n  tempPassword = null;\n  createdUsername = null;\n\n  constructor(private router:Router, private adminUsersService:AdminUsersService, private snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n\n  }\n\n  getErrorMessage(field:string):string{\n    switch(field) {\n      case 'firstName':\n        return this.firstName.hasError('required') ? 'This field cannot be left blank' : '';\n      case 'lastName':\n        return this.lastName.hasError('required') ? 'This field cannot be left blank' : '';\n      case 'username': \n        return this.username.hasError('required') ? 'this field cannot be left blank' : '';\n    };\n  };\n\n  // Generate a random password\n  getRandomPassword(): string {\n    let firstWord: string = randomWords();\n    firstWord = firstWord.toUpperCase();\n    let secondWord: string = randomWords();\n    let randNum = Math.floor(Math.random() * 100);\n\n    return `${randNum}${firstWord}@${secondWord}`\n  }\n  async onSubmit() {\n    // Validate the userform\n    if(this.firstName.invalid || this.lastName.invalid || this.username.invalid) {\n      this.snackBar.open('You missed something..', 'dismiss', {duration: 3000});\n    };\n\n    // check if user name is taken\n    let queryUser = await this.adminUsersService.getUserByUsername(this.username.value);\n\n    // Show error message if username is taken\n    if(queryUser) {\n      this.snackBar.open('Username is taken..', 'dismiss', {duration: 3000});\n      return false;\n    };\n\n    // Generate a random password and log the created username\n    this.tempPassword = this.getRandomPassword();\n\n    // Create a new user object\n    let userInfo = {\n      firstName: this.firstName.value,\n      lastName: this.lastName.value,\n      username: this.username.value,\n      password: this.tempPassword\n    }\n    // Send the request through admin service\n    let createUserRequest = await this.adminUsersService.createUser(userInfo);\n\n    if(!createUserRequest) {\n      this.snackBar.open('Something went wrong while creating the user...', 'dismiss', {duration: 3000});\n      return false;\n    };\n    // Query the newly created user to ensure it is in the database\n    let createdUser = await this.adminUsersService.getUserByUsername(this.username.value);\n\n    if(!createdUser) {\n      this.snackBar.open('Something went wrong... Cannot find new user in database', 'dismiss', {duration: 3000});\n      return false;\n    }\n\n    //If everything is successful\n    this.createdUsername = createdUser.username;\n    this.snackBar.open('User has been successfully created!', 'dismiss', {duration: 3000});\n    \n  }\n\n  onClear() { \n    this.firstName.reset()\n    this.lastName.reset()\n    this.username.reset()\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { UsersService, User } from \"../services/users.service\";\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class AdminUsersService {\n  constructor(private http: HttpClient, private usersService: UsersService ) {}\n\n  standardHttpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + localStorage.getItem('token')\n    })\n  };\n\n  //Get a specific user by username\n  async getUserByUsername(username: string) {\n    return await this.http.get<User>(environment.apiURL + '/users/username/' + username, this.standardHttpOptions).toPromise();\n  };\n\n  // GET a specific user by ID\n  async getUser(userID: string) {\n    return await this.http.get<User>(environment.apiURL + '/users/id/' + userID, this.standardHttpOptions).toPromise()\n  };\n\n  async getAllUsers() {\n\n    return await this.http.get<User[]>(environment.apiURL + '/users/', this.standardHttpOptions).toPromise()\n  };\n\n  // PUT update another users information\n  async updateUserInfo(updatedUserInfo: UserUpdate) {\n    \n    return await this.http.put<User>(environment.apiURL + '/users/' + updatedUserInfo.id, updatedUserInfo, this.standardHttpOptions).toPromise()\n  };\n\n  // POST add a new user\n  async createUser(userInfo: {firstName: string, lastName: string, username: string, password: string}) {\n\n    return await this.http.post<User>(environment.apiURL + '/users/', userInfo, this.standardHttpOptions).toPromise();\n  };\n\n  async deleteUser(userID): Promise<User> {\n    \n    return await this.http.delete<User>(environment.apiURL + '/users/' + userID, this.standardHttpOptions).toPromise();\n  }\n}\n\nexport interface UserUpdate {\n  id: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n  clinic: string;\n  site: string;\n  status: string;\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { environment } from '../../environments/environment';\nimport { UsersService } from './users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private usersService:UsersService, private http:HttpClient) { }\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + localStorage.getItem('token')\n    })\n  };\n\n  // GET all activities\n  async getActivities() {\n    return await this.http.get<Activity[]>(environment.apiURL + '/activities', this.httpOptions).toPromise();\n  }\n\n  // POST entry\n  async addEntry(entry:Entry) {\n    return await this.http.post<Entry>(environment.apiURL + '/entries', entry, this.httpOptions).toPromise();\n  }\n\n  // GET all submitted entries\n  async getEntries() {\n    return await this.http.get<Entry[]>(environment.apiURL +'/entries', this.httpOptions).toPromise();\n  }\n\n  // GET all sites\n  getSites() {\n    const sites = [\n      {name: 'Wing', clinics: ['Mental Health', 'Physical Medicine']},\n      {name: 'Beale', clinics: ['Mental Health', 'Physical Medicine']},\n      {name: 'Ft. Gordon', clinics: ['Mental Health', 'Physical Medicine']},\n      {name: 'Langley', clinics: ['Mental Health', 'Physical Medicine']},\n      {name: 'Korea', clinics: ['Mental Health', 'Physical Medicine']},\n      {name: 'Ramstein', clinics: ['Mental Health', 'Physical Medicine']},\n      {name: 'Hawaii', clinics: ['Mental Health', 'Physical Medicine']},\n  ];\n  \n    return sites;\n    // return await this.http.get<sites[]>(environment.apiURL + '/sites', this.httpOptions).toPromise();\n  }\n}\n\n\nexport interface Activity {\n  _id: string;\n  name: string;\n  category: string;\n  properties: [];\n};\n\nexport interface Entry {\n  _id?: string;\n  activityID: string;\n  activity: string;\n  category: string;\n  creator: string;\n  dateEntered: Date;\n  dateCreated: Date;\n  site: string;\n  clinic: string;\n  userStatus: string;\n  hours?: number;\n  members?: number;\n  description?: string;\n};","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { environment } from '../../environments/environment';\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport { MatSnackBar } from '@angular/material';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  public firstName: string;\n  public mainUser: User;\n  public userLoggedIn = new BehaviorSubject<boolean>(false);\n\n  standardHttpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer' + localStorage.getItem('token')\n    })\n  };\n\n  constructor(private http:HttpClient, private snackbar:MatSnackBar) { }\n\n  async signIn(userInfo: {username: string, password: string}): Promise<Response> {\n  \n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    }\n\n    return await this.http.post<Response>(environment.apiURL + '/signIn', userInfo, httpOptions).toPromise()\n  \n  }\n\n  // PUT Request\n  async updateUserInfo(updatedUserInfo?: {firstName:string, lastName:string, displayName:string, password?:string}, passwordOnly?:{password: string}) {\n\n\n    if(updatedUserInfo) {\n      return await this.http.put<User>(environment.apiURL + '/users/' + this.mainUser.id, updatedUserInfo, this.standardHttpOptions).toPromise()\n    } else if(passwordOnly) {\n      return await this.http.put<User>(environment.apiURL + '/users/' + this.mainUser.id, passwordOnly, this.standardHttpOptions).toPromise()\n    }\n  }\n\n  // Load the user into the global space\n  getUser(userToken: string) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + userToken\n      })\n  };\n  const jwtHelper = new JwtHelperService();\n\n  // Set the token to the local storage\n  localStorage.setItem('token', userToken);\n\n  // Decode the web token to get the id\n  const decodedToken: DecodedToken = jwtHelper.decodeToken(userToken);\n  \n  // Get request with the id\n  this.http.get<User>(environment.apiURL + '/users/id/' + decodedToken.userID, httpOptions).toPromise()\n  .then((response) => {\n    this.mainUser = response;\n    this.mainUser.id = decodedToken.userID;\n    this.mainUser.token = userToken;\n    this.userLoggedIn.next(true);\n  })\n  .catch((err) => {\n    console.log('UNHANDLED SERVER ERROR: ' + err)\n    this.snackbar.open('The was an error in retrieving user information... Please try reloading the page', 'dismiss', {duration:5000})\n  })\n\n  };\n\n  get isLoggedIn(): Observable<boolean>{\n    return this.userLoggedIn.asObservable();\n  };\n\n  get goodToken(): boolean {\n    // If there is no token \n    if(!localStorage.getItem('token')) { return false };\n\n    const jwtHelper = new JwtHelperService();\n    \n    // If the token is not expired, it's a good token\n    if(!jwtHelper.isTokenExpired(localStorage.getItem('token'))) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  logout() {\n    this.mainUser = null;\n    this.userLoggedIn.next(false);\n    localStorage.clear();\n  }\n};\n\n// INTERFACES \nexport interface Response {\n  expiresIn: number;\n  accessToken: string;\n  errorMessage?: string;\n};\n\nexport interface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n  password: string;\n  displayName: string;\n  site: string;\n  clinic: string;\n  status: string;\n  token?: string;\n\n};\n\ninterface DecodedToken {\n  userID: string;\n  iat:number;\n  exp: string;\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiURL: 'http://localhost:3000'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}